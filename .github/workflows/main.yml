name: actions
# Controls when the action will run. Triggers the workflow on pull requests
# Events but only for the main, homework/* branches
on:
  push:
    branches:
      - main
      - homework/*
  pull_request:
    types: [assigned, unassigned, labeled, unlabeled, opened, reopened, edited, closed, ready_for_review, locked, unlocked, review_requested, review_request_removed]
    branches:
      - main
      - homework/*
  pull_request_review:
  pull_request_review_comment:
jobs:
  build:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-20.04
    steps:
    # Checks-out the repository under $GITHUB_WORKSPACE, so the job can access it. It needs sudo
      - uses: actions/checkout@v2
    # Logout sudo. Next steps will be done as user named actions
      - name: logout
        run: |
          exit
    # Set environments for all job's steps
      - name: Set Env
        run: |
            echo "statusSymbol=$(echo -ne '\xF0\x9F\x86\x98' | iconv -f utf-8)">>$GITHUB_ENV
            echo "message=$(echo "Unknown Error. Job is failed")">>$GITHUB_ENV
            echo "GIT_COMMIT_SHORT=$(git rev-parse --short=7 ${{ github.sha }})">>$GITHUB_ENV
            echo "GIT_ACTOR_EMAIL=$(git --no-pager show -s --format='%ae')">>$GITHUB_ENV
            echo "GIT_ACTOR_NAME=$(git --no-pager show -s --format='%an')">>$GITHUB_ENV
            echo "GIT_COMMIT_MESSAGE=$(git log -1 --pretty=%s | cat)">>$GITHUB_ENV
            echo "GIT_COMMIT_REPO=${{ github.repository }}">>$GITHUB_ENV
            echo "GIT_COMMIT_BRANCH=$(git branch --show-current)">>$GITHUB_ENV
            echo "label_name=${{ github.event.label.name }}">>$GITHUB_ENV
            echo "label_description=${{ github.event.label.description }}">>$GITHUB_ENV
            echo "assignee_login=${{ github.event.assignee.login }}">>$GITHUB_ENV
            echo "assignee_type=${{ github.event.assignee.type }}">>$GITHUB_ENV
            echo "reviewer_login=${{ github.event.requested_reviewer.login }}">>$GITHUB_ENV
            echo "comment=${{ github.body }}">>$GITHUB_ENV
            echo "title=${{ github.title }}">>$GITHUB_ENV
      # Set information about github event
      - name: Set GitInfo
        if: ${{ github.event_name == 'push' }}
        run: |
           echo "GitInfo=$(echo "<code>Repository:</code> $GIT_COMMIT_REPO%0A<code>Branch:</code> $GIT_COMMIT_BRANCH%0A<code>Commit:</code> <b>$GIT_COMMIT_SHORT</b>%0A<code>Actor:</code> $GIT_ACTOR_NAME%0A<code>Message:</code> $GIT_COMMIT_MESSAGE")">>$GITHUB_ENV
      # =============================================================PULL REQUEST EVENT=============================================================
      # Set information about github event with name pull_request
      # Set git infortmation
      - name: Set GitInfo PR
        run: |
           echo "GitInfoPR=$(echo "<code>Repository:</code> $GIT_COMMIT_REPO%0A<code>Compare Branch:</code> ${{ github.head_ref }}%0A<code>Base Branch:</code> ${{ github.base_ref }}%0A<code>Commit:</code> <b>$GIT_COMMIT_SHORT</b>%0A<code>Actor:</code> $GIT_ACTOR_NAME%0A<code>Message:</code> $GIT_COMMIT_MESSAGE")">>$GITHUB_ENV
      # Pull Request actions
      - name: Pull Request opened
        if: ${{ github.event.action == 'opened' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request is opened")">>$GITHUB_ENV
      - name: Pull Request reopened
        if: ${{ github.event.action == 'reopened' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request is reopened")">>$GITHUB_ENV
      - name: Pull Request assigned
        if: ${{ github.event.action == 'assigned' }}
        run: |
          echo "message=$(echo "<code>Details:</code> $assignee_type $assignee_login was assigned to this Pull Request")">>$GITHUB_ENV
      - name: Pull Request unassigned
        if: ${{ github.event.action == 'unassigned' }}
        run: |
          echo "message=$(echo "<code>Details:</code> $assignee_type $assignee_login was unassigned from this Pull Request")">>$GITHUB_ENV
      - name: Pull Request labeled
        if: ${{ github.event.action == 'labeled' }}
        run: |
          echo "message=$(echo "<code>Details:</code> A label <b>$label_name</b> was applied to this Pull Request%0A<code>Description:</code> $label_description")">>$GITHUB_ENV
      - name: Pull Request unlabeled
        if: ${{ github.event.action == 'unlabeled' }}
        run: |
          echo "message=$(echo "<code>Details:</code> A label <b>$label_name</b> was removed to this Pull Request%0A<code>Description:</code> $label_description")">>$GITHUB_ENV
      - name: Pull Request edited
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'edited' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request was edited")">>$GITHUB_ENV
      - name: Pull Request closed
        if: ${{ github.event.action == 'closed' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request was closed")">>$GITHUB_ENV
      - name: Pull Request is ready for review
        if: ${{ github.event.action == 'ready_for_review' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request was taken out from draft mode")">>$GITHUB_ENV
      - name: Pull Request locked
        if: ${{ github.event.action == 'locked' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request was locked")">>$GITHUB_ENV
      - name: Pull Request unlocked
        if: ${{ github.event.action == 'unlocked' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request was unlocked")">>$GITHUB_ENV
      - name: Pull Request review request
        if: ${{ github.event.action == 'review_requested' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Request a user for review")">>$GITHUB_ENV
      - name: Pull Request rm review request
        if: ${{ github.event.action == 'review_request_removed' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Remove request from user for review")">>$GITHUB_ENV
      ######################testing actions###########################
      - name: Pull Request rv ed
        if: ${{ github.event_name == 'pull_request_review' && github.event.action == 'edited' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request review edited")">>$GITHUB_ENV
      - name: Pull Request rvc ed
        if: ${{ github.event_name == 'pull_request_review_comment' && github.event.action == 'edited' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request review comment edited%0A<code>Comment:</code> $comment%0A<code>Title:</code> $title")">>$GITHUB_ENV
      - name: Pull Request rv sbm
        if: ${{ github.event.action == 'submitted' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request review submitted")">>$GITHUB_ENV
      - name: Pull Request rv dism
        if: ${{ github.event.action == 'dismissed' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request review dismissed")">>$GITHUB_ENV
      - name: Pull Request rvc crtd
        if: ${{ github.event.action == 'created' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request review comment created%0A<code>Comment:</code> $comment%0A<code>Title:</code> $title")">>$GITHUB_ENV
      - name: Pull Request rvc del
        if: ${{ github.event.action == 'deleted' }}
        run: |
          echo "message=$(echo "<code>Details:</code> Pull Request review comment deleted%0A<code>Comment:</code> $comment%0A<code>Title:</code> $title")">>$GITHUB_ENV
      - name: Pull Request unassigned
      #########################end test###############################
      # Set specific Status Message if job is failed
      - name: Set error
        if: ${{ failure() && github.event_name == 'push' }}
        run: |
          echo "statusMessage=$(echo "$message%0A$GitInfo")">>$GITHUB_ENV
      # Set specific Status Message if job is failed. PR
      - name: Set error PR
        if: ${{ failure() && github.event_name == 'pull_request' }}
        run: |
          echo "statusMessage=$(echo "$message%0A$GitInfoPR")">>$GITHUB_ENV
       # Set specific Status Message if job is successfull
      - name: Set success message
        if: ${{ success() && github.event_name == 'push' }}
        run: |
              echo "message=$(echo "<code>Details:</code> Something is successfully pushed to repository")">>$GITHUB_ENV
      # Set specific Status Symbol
      - name: Set success symbol
        if: success()
        run: |
              echo "statusSymbol=$(echo -ne '\xE2\x9C\x85' | iconv -f utf-8)">>$GITHUB_ENV
      # Set Message for Telegram
      - name: Set success status
        if: ${{ success() && github.event_name == 'push'}}
        run: |
              echo "statusMessage=$(echo "$message%0A$GitInfo")">>$GITHUB_ENV
      # Set Message for Telegram PR
      - name: Set success status PR
        if: ${{ success() && github.event_name == 'pull_request' }}
        run: |
              echo "statusMessage=$(echo "$message%0A$GitInfoPR")">>$GITHUB_ENV
      # Send Message to Telegram Chat
      - name: Send to Telegram
        if: always()
        env:
          TG_TOKEN: 1412871621:AAGzW6sTAQUgGU6HAsDDZ8eX082KSO3qQXE
          TG_ID: -1001265046931
        run: |
              curl -s -X POST "https://api.telegram.org/bot$TG_TOKEN/sendMessage" -d chat_id=$TG_ID -d parse_mode="HTML" -d text="<code>Status:</code>$statusSymbol%0A$statusMessage"
